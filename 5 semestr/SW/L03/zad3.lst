
zad3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000080  00800100  0000023c  000002d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000023c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800180  00800180  00000350  2**0
                  ALLOC
  3 .stab         00000918  00000000  00000000  00000350  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ef4  00000000  00000000  00000c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001b5c  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b70  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  00001bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  000021a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00002746  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  00002760  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e3       	ldi	r30, 0x3C	; 60
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 38       	cpi	r26, 0x80	; 128
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e8       	ldi	r26, 0x80	; 128
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 39       	cpi	r26, 0x94	; 148
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 89 00 	call	0x112	; 0x112 <main>
  9e:	0c 94 1c 01 	jmp	0x238	; 0x238 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uart_transmit>:

// transmisja jednego znaku
int uart_transmit(char data, FILE *stream)
{
  // czekaj aż transmiter gotowy
  while(!(UCSR0A & _BV(UDRE0)));
  a6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  aa:	95 ff       	sbrs	r25, 5
  ac:	fc cf       	rjmp	.-8      	; 0xa6 <uart_transmit>
  UDR0 = data;
  ae:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  return 0;
}
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	08 95       	ret

000000b8 <uart_receive>:

// odczyt jednego znaku
int uart_receive(FILE *stream)
{
  // czekaj aż znak dostępny
  while (!(UCSR0A & _BV(RXC0)));
  b8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  bc:	87 ff       	sbrs	r24, 7
  be:	fc cf       	rjmp	.-8      	; 0xb8 <uart_receive>
  return UDR0;
  c0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	08 95       	ret

000000c8 <uart_init>:
#define LED_PORT PORTD
uint16_t tab[64] = {1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 7, 7, 7, 7, 7, 7, 7, 7, 20, 20, 20, 20, 20, 20, 20, 20, 54, 54, 54, 54, 54, 54, 54, 54, 148, 148, 148, 148, 148, 148, 148, 148, 403, 403, 403, 403, 403, 403, 403, 403, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096};
// inicjalizacja UART
void uart_init()
{
  LED_DDR |= _BV(LED);
  c8:	52 9a       	sbi	0x0a, 2	; 10
  // ustaw baudrate
  UBRR0 = UBRR_VALUE;
  ca:	87 e6       	ldi	r24, 0x67	; 103
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  d2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  // włącz odbiornik i nadajnik
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
  d6:	88 e1       	ldi	r24, 0x18	; 24
  d8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  // ustaw format 8n1
  UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
  dc:	86 e0       	ldi	r24, 0x06	; 6
  de:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  e2:	08 95       	ret

000000e4 <adc_init>:
}

// inicjalizacja ADC
void adc_init()
{
  ADMUX   = _BV(REFS0); // referencja AVcc, wejście ADC0
  e4:	80 e4       	ldi	r24, 0x40	; 64
  e6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
  DIDR0   = _BV(ADC0D); // wyłącz wejście cyfrowe na ADC0
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
  // częstotliwość zegara ADC 125 kHz (16 MHz / 128)
  ADCSRA  =  _BV(ADPS0) | _BV(ADPS1) | _BV(ADPS2); // preskaler 128
  f0:	ea e7       	ldi	r30, 0x7A	; 122
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	87 e0       	ldi	r24, 0x07	; 7
  f6:	80 83       	st	Z, r24
  ADCSRA |= _BV(ADEN); // włącz ADC
  f8:	80 81       	ld	r24, Z
  fa:	80 68       	ori	r24, 0x80	; 128
  fc:	80 83       	st	Z, r24
  fe:	08 95       	ret

00000100 <delay_us>:
  
}

FILE uart_file;

void delay_us(uint16_t l){
 100:	05 c0       	rjmp	.+10     	; 0x10c <delay_us+0xc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 102:	25 e0       	ldi	r18, 0x05	; 5
 104:	2a 95       	dec	r18
 106:	f1 f7       	brne	.-4      	; 0x104 <delay_us+0x4>
 108:	00 00       	nop
 10a:	01 97       	sbiw	r24, 0x01	; 1
    
    while(l--) _delay_us(1);
 10c:	00 97       	sbiw	r24, 0x00	; 0
 10e:	c9 f7       	brne	.-14     	; 0x102 <delay_us+0x2>
 110:	08 95       	ret

00000112 <main>:

}

int main()
{
  LED_DDR |= _BV(LED);
 112:	52 9a       	sbi	0x0a, 2	; 10
#define LED_PORT PORTD
uint16_t tab[64] = {1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 7, 7, 7, 7, 7, 7, 7, 7, 20, 20, 20, 20, 20, 20, 20, 20, 54, 54, 54, 54, 54, 54, 54, 54, 148, 148, 148, 148, 148, 148, 148, 148, 403, 403, 403, 403, 403, 403, 403, 403, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096};
// inicjalizacja UART
void uart_init()
{
  LED_DDR |= _BV(LED);
 114:	52 9a       	sbi	0x0a, 2	; 10
  // ustaw baudrate
  UBRR0 = UBRR_VALUE;
 116:	87 e6       	ldi	r24, 0x67	; 103
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 11e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  // włącz odbiornik i nadajnik
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
 122:	88 e1       	ldi	r24, 0x18	; 24
 124:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  // ustaw format 8n1
  UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
 128:	86 e0       	ldi	r24, 0x06	; 6
 12a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
{
  LED_DDR |= _BV(LED);
  // zainicjalizuj UART
  uart_init();
  // skonfiguruj strumienie wejścia/wyjścia
  fdev_setup_stream(&uart_file, uart_transmit, uart_receive, _FDEV_SETUP_RW);
 12e:	80 e8       	ldi	r24, 0x80	; 128
 130:	91 e0       	ldi	r25, 0x01	; 1
 132:	23 e5       	ldi	r18, 0x53	; 83
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	30 93 89 01 	sts	0x0189, r19	; 0x800189 <__data_end+0x9>
 13a:	20 93 88 01 	sts	0x0188, r18	; 0x800188 <__data_end+0x8>
 13e:	2c e5       	ldi	r18, 0x5C	; 92
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	30 93 8b 01 	sts	0x018B, r19	; 0x80018b <__data_end+0xb>
 146:	20 93 8a 01 	sts	0x018A, r18	; 0x80018a <__data_end+0xa>
 14a:	23 e0       	ldi	r18, 0x03	; 3
 14c:	20 93 83 01 	sts	0x0183, r18	; 0x800183 <__data_end+0x3>
 150:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <__data_end+0xd>
 154:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <__data_end+0xc>
  stdin = stdout = stderr = &uart_file;
 158:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <__iob+0x5>
 15c:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <__iob+0x4>
 160:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <__iob+0x3>
 164:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <__iob+0x2>
 168:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <__iob+0x1>
 16c:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <__iob>
}

// inicjalizacja ADC
void adc_init()
{
  ADMUX   = _BV(REFS0); // referencja AVcc, wejście ADC0
 170:	80 e4       	ldi	r24, 0x40	; 64
 172:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
  DIDR0   = _BV(ADC0D); // wyłącz wejście cyfrowe na ADC0
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
  // częstotliwość zegara ADC 125 kHz (16 MHz / 128)
  ADCSRA  =  _BV(ADPS0) | _BV(ADPS1) | _BV(ADPS2); // preskaler 128
 17c:	87 e0       	ldi	r24, 0x07	; 7
 17e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  ADCSRA |= _BV(ADEN); // włącz ADC
 182:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 186:	80 68       	ori	r24, 0x80	; 128
 188:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    ADCSRA |= _BV(ADSC); // wykonaj konwersję
    while (!(ADCSRA & _BV(ADIF))); // czekaj na wynik
    ADCSRA |= _BV(ADIF); // wyczyść bit ADIF (pisząc 1!)LED_DDR |= _BV(LED);
    uint16_t dl = ADC;
    dl >>= 4;
    LED_PORT = _BV(LED);
 18c:	b4 e0       	ldi	r27, 0x04	; 4
    delay_us(tab[dl] * 10);
    LED_PORT = ~_BV(LED);
 18e:	ab ef       	ldi	r26, 0xFB	; 251
    delay_us(tab[64-dl] * 10 );
 190:	40 e4       	ldi	r20, 0x40	; 64
 192:	50 e0       	ldi	r21, 0x00	; 0
  stdin = stdout = stderr = &uart_file;
  // zainicjalizuj ADC
  adc_init();
  // mierz napięcie
  while(1) {
    ADCSRA |= _BV(ADSC); // wykonaj konwersję
 194:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 198:	80 64       	ori	r24, 0x40	; 64
 19a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    while (!(ADCSRA & _BV(ADIF))); // czekaj na wynik
 19e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 1a2:	84 ff       	sbrs	r24, 4
 1a4:	fc cf       	rjmp	.-8      	; 0x19e <main+0x8c>
    ADCSRA |= _BV(ADIF); // wyczyść bit ADIF (pisząc 1!)LED_DDR |= _BV(LED);
 1a6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 1aa:	80 61       	ori	r24, 0x10	; 16
 1ac:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    uint16_t dl = ADC;
 1b0:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 1b4:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    dl >>= 4;
 1b8:	72 95       	swap	r23
 1ba:	62 95       	swap	r22
 1bc:	6f 70       	andi	r22, 0x0F	; 15
 1be:	67 27       	eor	r22, r23
 1c0:	7f 70       	andi	r23, 0x0F	; 15
 1c2:	67 27       	eor	r22, r23
    LED_PORT = _BV(LED);
 1c4:	bb b9       	out	0x0b, r27	; 11
    delay_us(tab[dl] * 10);
 1c6:	fb 01       	movw	r30, r22
 1c8:	ee 0f       	add	r30, r30
 1ca:	ff 1f       	adc	r31, r31
 1cc:	e0 50       	subi	r30, 0x00	; 0
 1ce:	ff 4f       	sbci	r31, 0xFF	; 255
 1d0:	20 81       	ld	r18, Z
 1d2:	31 81       	ldd	r19, Z+1	; 0x01
 1d4:	c9 01       	movw	r24, r18
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	22 0f       	add	r18, r18
 1dc:	33 1f       	adc	r19, r19
 1de:	22 0f       	add	r18, r18
 1e0:	33 1f       	adc	r19, r19
 1e2:	22 0f       	add	r18, r18
 1e4:	33 1f       	adc	r19, r19
 1e6:	82 0f       	add	r24, r18
 1e8:	93 1f       	adc	r25, r19

FILE uart_file;

void delay_us(uint16_t l){
    
    while(l--) _delay_us(1);
 1ea:	00 97       	sbiw	r24, 0x00	; 0
 1ec:	31 f0       	breq	.+12     	; 0x1fa <main+0xe8>
 1ee:	25 e0       	ldi	r18, 0x05	; 5
 1f0:	2a 95       	dec	r18
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <main+0xde>
 1f4:	00 00       	nop
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	d1 f7       	brne	.-12     	; 0x1ee <main+0xdc>
    ADCSRA |= _BV(ADIF); // wyczyść bit ADIF (pisząc 1!)LED_DDR |= _BV(LED);
    uint16_t dl = ADC;
    dl >>= 4;
    LED_PORT = _BV(LED);
    delay_us(tab[dl] * 10);
    LED_PORT = ~_BV(LED);
 1fa:	ab b9       	out	0x0b, r26	; 11
    delay_us(tab[64-dl] * 10 );
 1fc:	fa 01       	movw	r30, r20
 1fe:	e6 1b       	sub	r30, r22
 200:	f7 0b       	sbc	r31, r23
 202:	ee 0f       	add	r30, r30
 204:	ff 1f       	adc	r31, r31
 206:	e0 50       	subi	r30, 0x00	; 0
 208:	ff 4f       	sbci	r31, 0xFF	; 255
 20a:	20 81       	ld	r18, Z
 20c:	31 81       	ldd	r19, Z+1	; 0x01
 20e:	c9 01       	movw	r24, r18
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	22 0f       	add	r18, r18
 216:	33 1f       	adc	r19, r19
 218:	22 0f       	add	r18, r18
 21a:	33 1f       	adc	r19, r19
 21c:	22 0f       	add	r18, r18
 21e:	33 1f       	adc	r19, r19
 220:	82 0f       	add	r24, r18
 222:	93 1f       	adc	r25, r19

FILE uart_file;

void delay_us(uint16_t l){
    
    while(l--) _delay_us(1);
 224:	00 97       	sbiw	r24, 0x00	; 0
 226:	09 f4       	brne	.+2      	; 0x22a <main+0x118>
 228:	b5 cf       	rjmp	.-150    	; 0x194 <main+0x82>
 22a:	25 e0       	ldi	r18, 0x05	; 5
 22c:	2a 95       	dec	r18
 22e:	f1 f7       	brne	.-4      	; 0x22c <main+0x11a>
 230:	00 00       	nop
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	d1 f7       	brne	.-12     	; 0x22a <main+0x118>
 236:	ae cf       	rjmp	.-164    	; 0x194 <main+0x82>

00000238 <_exit>:
 238:	f8 94       	cli

0000023a <__stop_program>:
 23a:	ff cf       	rjmp	.-2      	; 0x23a <__stop_program>
